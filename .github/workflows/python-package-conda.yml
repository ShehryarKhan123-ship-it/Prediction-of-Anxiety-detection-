git init
git add
git commit -m "Initial commit: Student anxiety detection project"
student Anixety prediction
├── src/
│   └── prediction-of-anxiety-detection
│       ├── __init__.py
│       ├── data_preprocessing.py  
│       ├── model_training.py  
│       ├── visualization.py  
├── tests/  
├── environment.yml  
├── README.md  
cd Prediction-of-Anxiety-detection
touch src/prediction-of-anxiety-detection/__init__.py
touch src/your_package/data_preprocessing.py
touch src/prediction-of-anxiety-detection/model_training.py
touch src/prediction-of-anxiety-detection/visualization.py
mv Untitled-1.py src/mv anxiety.py src/your_package/model_training.py/model_training.py
mkdir tests/
conda env create -f environment.yml
conda activate student_anxiety_env 
name: student_anxiety_env
channels:
  - conda-forge
dependencies:
  - python=3.10
  - pandas
  - numpy
  - matplotlib
  - scikit-learn
  - seaborn
data_preprocessing.py
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import seaborn as sns


def preprocess_data(data_path):
 df=pd.read_csv('anxiety.csv',encoding='latin-1') 

  Args:
      data_path (str): Path to the CSV file containing anxiety data.

  Returns:
      pd.DataFrame: The cleaned and preprocessed anxiety data.
  """
  # Check for missing values
  print(data.isnull().sum())

  # Handle missing values 
  # For example, you could impute missing values using the mean or median.
  data = data.fillna(data.mean()) 
  return data
data = preprocess_data('anxiety.csv')
model_training.py
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


def train_model(data, feature_name):
  """
  Trains a linear regression model on a specific feature of the anxiety data.

  Args:
      data (pd.DataFrame): The preprocessed anxiety data.
      feature_name (str): The name of the feature to use for training.

  Returns:
      model: The trained linear regression model.
      mse: The mean squared error of the model on the test set.
  """

   feature and target variables
  X = data[['Hours']]
  y = data[['anxiety_level']]
  X1 = data[['Age']]
  y1 = data[['anxiety_level']]
  X2 = data[['Timestamp']]
  y2 = data[['anxiety_level']]
  # Split the data into training and testing sets
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
 X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2, random_state=42)
  X2_train, X2_test, y2_train, y2_test = train_test_split(X2, y2, test_size=0.2, random_state=42)
  # Create and train the linear regression model
  model = LinearRegression()
  model.fit(X_train, y_train)
  
  # second model 
  model1 = LinearRegression()
  model.fit(X1_train, y1_train)
  
  # third model 
  mode2 = LinearRegression()
  model.fit(X2_train, y2_train)
  
  # Make predictions on the testing set
  y_pred = model.predict(X_test)
  # Evaluate the model
  mse = mean_squared_error(y_test, y_pred)
  
  print(f"Feature: {feature_name}")
  print("Mean Squared Error:", mse)
  print(X_test.shape)
  print(y_test.shape)

    print(X1_test.shape)
  print(y1_test.shape)

  print(X2_test.shape)
  print(y2_test.shape)

  return model, mse
features = ['Timestamp', 'Hours', 'Age']
for feature in features:
  model, mse = train_model(data.copy(), feature)
  # Visualize the results (assuming a single feature for simplicity)
  plt.scatter(X_test, y_test, color='black')
  plt.plot(X_test, y_pred, color='blue', linewidth=3)
  plt.xlabel('Feature')
  plt.ylabel('Anxiety Level')
  plt.title(f'Linear Regression Model {feature} and Anxiety-Level')
  plt.show()







